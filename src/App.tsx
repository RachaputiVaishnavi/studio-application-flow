
import { Toaster } from "@/components/ui/toaster";
import { Toaster as Sonner } from "@/components/ui/sonner";
import { TooltipProvider } from "@/components/ui/tooltip";
import { QueryClient, QueryClientProvider } from "@tanstack/react-query";
import { BrowserRouter, Routes, Route, Navigate } from "react-router-dom";
import { useState, useEffect } from "react";
import Login from "./pages/Login";
import Dashboard from "./pages/Dashboard";
import Applications from "./pages/Applications";
import Settings from "./pages/Settings";
import NotFound from "./pages/NotFound";
import DashboardLayout from "./components/layouts/DashboardLayout";

const queryClient = new QueryClient();

// JWT Token utility functions
const generateJWTToken = (userData: any) => {
  // In a real app, this would be generated by your backend
  const header = btoa(JSON.stringify({ alg: "HS256", typ: "JWT" }));
  const payload = btoa(JSON.stringify({
    ...userData,
    exp: Date.now() + (24 * 60 * 60 * 1000), // 24 hours
    iat: Date.now()
  }));
  const signature = btoa("mock-signature-for-demo");
  return `${header}.${payload}.${signature}`;
};

const validateJWTToken = (token: string): boolean => {
  try {
    const parts = token.split('.');
    if (parts.length !== 3) return false;
    
    const payload = JSON.parse(atob(parts[1]));
    const currentTime = Date.now();
    
    // Check if token is expired
    if (payload.exp && payload.exp < currentTime) {
      return false;
    }
    
    return true;
  } catch (error) {
    console.error("Invalid JWT token:", error);
    return false;
  }
};

const App = () => {
  const [isAuthenticated, setIsAuthenticated] = useState(false);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    // Check if user is already logged in with valid JWT
    const token = localStorage.getItem("auth-token");
    if (token && validateJWTToken(token)) {
      setIsAuthenticated(true);
    } else if (token) {
      // Remove invalid token
      localStorage.removeItem("auth-token");
    }
    setIsLoading(false);
  }, []);

  const handleLogin = (username: string) => {
    const userData = { username, role: "admin" };
    const token = generateJWTToken(userData);
    
    setIsAuthenticated(true);
    localStorage.setItem("auth-token", token);
    localStorage.setItem("user-data", JSON.stringify(userData));
  };

  const handleLogout = () => {
    setIsAuthenticated(false);
    localStorage.removeItem("auth-token");
    localStorage.removeItem("user-data");
  };

  if (isLoading) {
    return (
      <div className="min-h-screen flex items-center justify-center">
        <div className="animate-spin rounded-full h-32 w-32 border-b-2 border-gray-900"></div>
      </div>
    );
  }

  return (
    <QueryClientProvider client={queryClient}>
      <TooltipProvider>
        <Toaster />
        <Sonner />
        <BrowserRouter>
          <Routes>
            <Route 
              path="/login" 
              element={
                isAuthenticated ? 
                <Navigate to="/applications" replace /> : 
                <Login onLogin={handleLogin} />
              } 
            />
            
            <Route 
              path="/" 
              element={
                isAuthenticated ? 
                <DashboardLayout onLogout={handleLogout} /> : 
                <Navigate to="/login" replace />
              }
            >
              <Route index element={<Navigate to="/dashboard" replace />} />
              <Route path="dashboard" element={<Dashboard />} />
              <Route path="applications" element={<Applications />} />
              <Route path="settings" element={<Settings />} />
            </Route>
            
            <Route path="*" element={<NotFound />} />
          </Routes>
        </BrowserRouter>
      </TooltipProvider>
    </QueryClientProvider>
  );
};

export default App;
